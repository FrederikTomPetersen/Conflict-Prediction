cat("\014")
######################################################################
###                                                                ###
###                         MASTER SCRIPTS                         ###
###                                                                ###
######################################################################
#Possible workspaces - adjust to your local preferences
DataCave = "C:/Users/Frederik/Documents/SpecialeData/"
Private = "C:/Users/Frederik/Documents/SpecialeScripts/"
GitHub = "C:/Users/Frederik/Documents/GitHub/Ethnic-Conflict-Prediction"
Models = "C:/Users/Frederik/Documents/GitHub/Ethnic-Conflict-Prediction/Prediction models/models/"
Latexfigure ="C:/Users/Frederik/OneDrive - Københavns Universitet/Speciale paper/03_figures"
Latextable= "C:/Users/Frederik/OneDrive - Københavns Universitet/Speciale paper/04_tables"
# This scripts binds the dataanalysis of my thesis. It aims to control
# the workflow of the project. it starts out by loading all the necessary packages
# for the project. Then it defines alle the functions neccesary for the later scripts.
# After this intial defintions it starts getting the data from different sources.
# When the datasets are gathered it will automatically begin to tidy the data in order to make af join possible
# after the data are gathered
setwd(GitHub)
source("2 Packages.R")
source("3 Functions.R")
source("4 PostGres_connect.R")
cat("\014")
######################################################################
###                                                                ###
###                 LoTR -  Gathering of the data                  ###
###                                                                ###
######################################################################
##############################################
#Creating a base country year month structure
##############################################
CountryCodelistPanel <-  codelist_panel %>%
select(country.name.en,iso3c, iso2c, p4n, fips) %>%
filter(!is.na(p4n), !is.na(iso3c), !is.na(fips), !is.na(iso2c))
CountryCodelistPanel <-  unique(CountryCodelistPanel)
CountryCodelistPanel <- CountryCodelistPanel
StatesBase <-  CountryCodelistPanel %>%
group_by(country.name.en, iso3c,p4n,fips,iso2c) %>%
expand(year= 1989:2017, month = 1:12) # giver en tabel med 36936 country-months
rm(CountryCodelistPanel)
# I dette data ligger der en række dubeletter ( colombia, tyskland, korea, bare for at vælge et par stykker. Her skal jeg lave en frasortering!)
##############################################
# Joining conflicts to dataset
##############################################
GedAggregated <-  dbGetQuery(con, "SELECT * from ged_aggregated")
Dataset <- StatesBase %>%
left_join(GedAggregated, by = c("p4n" = "p4n", "year" = "year", "month" = "month"))
rm(StatesBase,GedAggregated)
##############################################
#Joining Ethinc Power Relations to dataset
##############################################
epr <-  dbGetQuery(con, "SELECT * from epr_grouped")
Dataset <- Dataset %>%
left_join(epr, by = c("p4n" = "gwid", "year" = "year", "month" = "month"))
noinfo <- Dataset %>%
filter(is.na(groupscount)) %>%
select(country.name.en.x, iso3c,p4n,fips) %>%
unique()
Dataset <- Dataset %>%
mutate(powerexcludednmb = lag(ifelse(is.na(groupscount),0,powerexcludednmb)),
powerexcludedprop = lag(ifelse(is.na(groupscount),0,powerexcludedprop)),
powersharennb = lag(ifelse(is.na(groupscount),0,powersharennb)),
powershareprop = lag(ifelse(is.na(groupscount),0,powershareprop)),
powerrulenmb = lag(ifelse(is.na(groupscount),0,powerrulenmb)),
powerruleprop = lag(ifelse(is.na(groupscount),0,powerruleprop)),
powerirrelevantnmb = lag(ifelse(is.na(groupscount),1,powerirrelevantnmb)),
powerirrelevantprop = lag(ifelse(is.na(groupscount),1,powerirrelevantprop)),
groupscount= lag(ifelse(is.na(groupscount),1,groupscount)))
rm(epr, noinfo)
polity4 <-  dbGetQuery(con, "SELECT * from polity_4")
#Definere en række workspaces - kræver tilpasning til egen computer
DataCave = "C:/Users/Frederik/Documents/SpecialeData/"
Private = "C:/Users/Frederik/Documents/SpecialeScripts/"
GitHub = "C:/Users/Frederik/Documents/GitHub/Ethnic-Conflict-Prediction"
Models = "C:/Users/Frederik/Documents/GitHub/Ethnic-Conflict-Prediction/Prediction models/models/"
Datafinal = "C:/Users/Frederik/Documents/GitHub/Ethnic-Conflict-Prediction/Data/"
Latexfigure ="C:/Users/Frederik/OneDrive - Københavns Universitet/Speciale paper/03_figures"
Latextable= "C:/Users/Frederik/OneDrive - Københavns Universitet/Speciale paper/04_tables"
# De følgende scripts kører projektet fra ende til anden
setwd(GitHub)
source("2 Packages.R") #Indhenter relevanter pakker for projektet
source("3 Functions.R") # Definere en række funktioner, der anvendes primært i Dataload.R
source("4 PostGres_connect.R") # Forbinder til PostgresSQl - kræver tilretning (!!!)
GedAggregated <-  dbGetQuery(con, "SELECT * from ged_aggregated")
timeline <-GedAggregated %>%
filter(cwy == 1) %>%
group_by(p4n, year) %>%
arrange(p4n, year, month) %>%
filter(row_number() == 1) %>%
group_by(p4n) %>%
mutate(is_contiguous = (year -1==lag(year)))
timeline <- timeline %>%
mutate(is_contiguous = case_when(is.na(is_contiguous) ~ FALSE,
TRUE~is_contiguous)) %>%
mutate(gvar = cumsum(!is_contiguous)) %>%
group_by(p4n, gvar) %>%
mutate(minyear = min(year),
maxyear = max(year)) %>%
ungroup() %>%
filter(is_contiguous == F | is.na(is_contiguous))
View(timeline)
View(GedAggregated)
filter <-  GedAggregated %>% filter(cwm==1)
