#x = liste af url'er
#m = startåret
for (m in x){
paste("Download nummer", m)
Event <- x[m]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Table <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <- rbind(Gdelt_Data, Table)
rm(Table)
unlink(Basefile)
unlink(paste0(Basename,".csv"))
print(paste("der er", length(x)-m, " tilbage af", length(x), "iterationer"))
Iterations_left = Iterations_left-1
m = m + 1
Sys.time()
Sys.sleep(100)
}
}
paste("Download nummer", m)
Event <- x[m]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Table <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <- rbind(Gdelt_Data, Table)
Gdelt_getter = function(x, m) {
#x = liste af url'er
#m = startåret
for (m in x){
paste("Download nummer", m)
Event <- x[m]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Table <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <- rbind(Gdelt_Data, Table)
rm(Table)
unlink(Basefile)
unlink(paste0(Basename,".csv"))
print(paste("der er", length(x)-m, " tilbage af", length(x), "iterationer"))
Iterations_left = Iterations_left-1
m = m + 1
Sys.time()
Sys.sleep(100)
}
}
Gdelt_Data <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <-  Gdelt_Data[0,]
Gdelt_getter(Event_udvalg_1_5,1)
Gdelt_getter(Event_udvalg_1_5,1)
m=1
Gdelt_getter(Event_udvalg_1_5, m)
Event <- x[m]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
Gdelt_getter = function(x, m) {
#x = liste af url'er
#m = startåret
for (i in x){
paste("Download nummer", m)
Event <- x[m]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Table <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <- rbind(Gdelt_Data, Table)
rm(Table)
unlink(Basefile)
unlink(paste0(Basename,".csv"))
print(paste("der er", length(x)-m, " tilbage af", length(x), "iterationer"))
Iterations_left = Iterations_left-1
m = m + 1
Sys.time()
Sys.sleep(100)
}
}
Gdelt_getter(Event_udvalg_1_5, m)
m=1
Gdelt_getter = function(x, m) {
#x = liste af url'er
#m = startåret
for (m in x){
paste("Download nummer", m)
Event <- x[m]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Table <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <- rbind(Gdelt_Data, Table)
rm(Table)
unlink(Basefile)
unlink(paste0(Basename,".csv"))
print(paste("der er", length(x)-m, " tilbage af", length(x), "iterationer"))
Iterations_left = Iterations_left-1
m = m + 1
Sys.time()
Sys.sleep(100)
}
}
Gdelt_getter(Event_udvalg_1_5, m)
paste("Download nummer", m)
Event <- x[m]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Table <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <- rbind(Gdelt_Data, Table)
rm(Table)
unlink(Basefile)
unlink(paste0(Basename,".csv"))
print(paste("der er", length(x)-m, " tilbage af", length(x), "iterationer"))
Iterations_left = Iterations_left-1
m = m + 1
Event <- x[m]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Table <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <- rbind(Gdelt_Data, Table)
rm(Table)
unlink(Basefile)
unlink(paste0(Basename,".csv"))
print(paste("der er", length(x)-m, " tilbage af", length(x), "iterationer"))
Iterations_left = Iterations_left-1
m = m + 1
Event <- x[m]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Table <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <- rbind(Gdelt_Data, Table)
rm(Table)
unlink(Basefile)
unlink(paste0(Basename,".csv"))
print(paste("der er", length(x)-m, " tilbage af", length(x), "iterationer"))
Iterations_left = Iterations_left-1
m = m + 1
Gdelt_getter(Event_udvalg_2_3, 1)
m=1
Gdelt_getter(Event_udvalg_2_3, m)
Gdelt_getter = function(x, m) {
#x = liste af url'er
#m = startåret
for (m in x){
paste("Download nummer", m)
Event <- x[m]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Table <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <- rbind(Gdelt_Data, Table)
rm(Table)
unlink(Basefile)
unlink(paste0(Basename,".csv"))
print(paste("der er", length(x)-m, " tilbage af", length(x), "iterationer"))
Iterations_left = Iterations_left-1
m = m + 1
Sys.time()
Sys.sleep(10)
}
}
Gdelt_getter(Event_udvalg_2_3, m)
Gdelt_getter = function(x, m) {
#x = liste af url'er
#m = startåret
for (i in x){
paste("Download nummer", m)
Event <- x[m]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Table <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <- rbind(Gdelt_Data, Table)
rm(Table)
unlink(Basefile)
unlink(paste0(Basename,".csv"))
print(paste("der er", length(x)-m, " tilbage af", length(x), "iterationer"))
Iterations_left = Iterations_left-1
m = m + 1
Sys.time()
Sys.sleep(10)
}
}
Gdelt_getter(Event_udvalg_2_3, m)
Gdelt_getter(Event_udvalg_2_3, 1)
m=1
x=Event_udvalg_2_3
Event <- x[m]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Table <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <- rbind(Gdelt_Data, Table)
rm(Table)
unlink(Basefile)
unlink(paste0(Basename,".csv"))
print(paste("der er", length(x)-m, " tilbage af", length(x), "iterationer"))
Iterations_left = Iterations_left-1
m = m + 1
Event <- x[m]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Table <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <- rbind(Gdelt_Data, Table)
Gdelt_getter(Event_udvalg_2_3, 1)
Gdelt_getter = function(x, m) {
#x = liste af url'er
#m = startåret
for (i in x){
paste("Download nummer", m)
Event <- x[m]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Table <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <- rbind(Gdelt_Data, Table)
rm(Table)
unlink(Basefile)
unlink(paste0(Basename,".csv"))
print(paste("der er", length(x)-m, " tilbage af", length(x), "iterationer"))
Iterations_left = Iterations_left-1
m = m + 1
Sys.time()
Sys.sleep(10)
}
return(Gdelt_Data)
}
Gdelt_getter(Event_udvalg_2_3, 1)
Output <-  Gdelt_getter(Event_udvalg_1_5, 1)
View(All_eventdb_url)
View(Output)
Gdelt_header <-  "https://www.gdeltproject.org/data/lookups/CSV.header.fieldids.xlsx"
Gdelt_header  <-  read.xlsx(Gdelt_header)
install.packages("RPOSTgreSQL")
install.packages("RPostgreSQL")
require("RPostgreSQL")
pw <- {
"Ilovedos2"
}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "speciale",
host = "localhost", port = 5432,
user = "postgres", password = pw)
con <- dbConnect(drv, dbname = "Speciale",
host = "localhost", port = 5432,
user = "postgres", password = pw)
rm(pw) # removes the password
dbExistsTable(con, "cartable")
# creates df, a data.frame with the necessary columns
data(mtcars)
df <- data.frame(carname = rownames(mtcars),
mtcars,
row.names = NULL)
df$carname <- as.character(df$carname)
rm(mtcars)
dbWriteTable(con, "cartable",
value = df, append = TRUE, row.names = FALSE)
ql_command <- "CREATE TABLE cartable
(
carname character varying NOT NULL,
mpg numeric(3,1),
cyl numeric(1,0),
disp numeric(4,1),
hp numeric(3,0),
drat numeric(3,2),
wt numeric(4,3),
qsec numeric(4,2),
vs numeric(1,0),
am numeric(1,0),
gear numeric(1,0),
carb numeric(1,0),
CONSTRAINT cartable_pkey PRIMARY KEY (carname)
)
WITH (
OIDS=FALSE
);
ALTER TABLE cartable
OWNER TO openpg;
COMMENT ON COLUMN cartable.disp IS '
';"
# sends the command and creates the table
dbGetQuery(con, sql_command)
sql_command <- "CREATE TABLE cartable
(
carname character varying NOT NULL,
mpg numeric(3,1),
cyl numeric(1,0),
disp numeric(4,1),
hp numeric(3,0),
drat numeric(3,2),
wt numeric(4,3),
qsec numeric(4,2),
vs numeric(1,0),
am numeric(1,0),
gear numeric(1,0),
carb numeric(1,0),
CONSTRAINT cartable_pkey PRIMARY KEY (carname)
)
WITH (
OIDS=FALSE
);
ALTER TABLE cartable
OWNER TO openpg;
COMMENT ON COLUMN cartable.disp IS '
';"
# sends the command and creates the table
dbGetQuery(con, sql_command)
sql_command <- "CREATE TABLE gdelt.cartable
(
carname character varying NOT NULL,
mpg numeric(3,1),
cyl numeric(1,0),
disp numeric(4,1),
hp numeric(3,0),
drat numeric(3,2),
wt numeric(4,3),
qsec numeric(4,2),
vs numeric(1,0),
am numeric(1,0),
gear numeric(1,0),
carb numeric(1,0),
CONSTRAINT cartable_pkey PRIMARY KEY (carname)
)
WITH (
OIDS=FALSE
);
ALTER TABLE cartable
OWNER TO openpg;
COMMENT ON COLUMN cartable.disp IS '
';"
# sends the command and creates the table
dbGetQuery(con, sql_command)
data(mtcars)
df <- data.frame(carname = rownames(mtcars),
mtcars,
row.names = NULL)
df$carname <- as.character(df$carname)
rm(mtcars)
# writes df to the PostgreSQL database "postgres", table "cartable"
dbWriteTable(con, "cartable",
value = df, append = TRUE, row.names = FALSE)
# query the data from postgreSQL
df_postgres <- dbGetQuery(con, "SELECT * from cartable")
identical(df, df_postgres)
identical(df, df_postgres)
identical(df, df_postgres)
identical(df, df_postgres)
identical(df, df_postgres)
identical(df, df_postgres)
identical(df, df_postgres)
identical(df, df_postgres)
identical(df, df_postgres)
identical(df, df_postgres)
identical(df, df_postgres)
identical(df, df_postgres)
identical(df, df_postgres)
identical(df, df_postgres)
identical(df, df_postgres)
identical(df, df_postgres)
# creates df, a data.frame with the necessary columns
data(mtcars)
df <- data.frame(carname = rownames(mtcars),
mtcars,
row.names = NULL)
df$carname <- as.character(df$carname)
rm(mtcars)
# writes df to the PostgreSQL database "postgres", table "cartable"
dbWriteTable(con, "cartable",
value = df, append = TRUE, row.names = FALSE)
# query the data from postgreSQL
df_postgres <- dbGetQuery(con, "SELECT * from cartable")
# compares the two data.frames
identical(df, df_postgres)
# TRUE
require(ggplot2)
ggplot(df_postgres, aes(x = as.factor(cyl), y = mpg, fill = as.factor(cyl))) +
geom_boxplot() + theme_bw()
dbExistsTable(con, "cartable")
# creates df, a data.frame with the necessary columns
data(mtcars)
df <- data.frame(carname = rownames(mtcars),
mtcars,
row.names = NULL)
df$carname <- as.character(df$carname)
rm(mtcars)
# writes df to the PostgreSQL database "postgres", table "cartable"
dbWriteTable(con, "cartable",
value = df, append = TRUE, row.names = FALSE)
# query the data from postgreSQL
df_postgres <- dbGetQuery(con, "SELECT * from cartable")
identical(df, df_postgres)
require(ggplot2)
ggplot(df_postgres, aes(x = as.factor(cyl), y = mpg, fill = as.factor(cyl))) +
geom_boxplot() + theme_bw()
df_postgres <- dbGetQuery(con, "SELECT * from cartable")
identical(df, df_postgres)
rm(df_postgres)
df_postgres <- dbGetQuery(con, "SELECT * from cartable")
dbExistsTable(con, "cartable")
# creates df, a data.frame with the necessary columns
data(mtcars)
df <- data.frame(carname = rownames(mtcars),
mtcars,
row.names = NULL)
df$carname <- as.character(df$carname)
rm(mtcars)
# writes df to the PostgreSQL database "postgres", table "cartable"
dbWriteTable(con, "cartable",
value = df, append = TRUE, row.names = FALSE)
df_postgres <- dbGetQuery(con, "SELECT * from cartable")
identical(df, df_postgres)
# Basic Graph of the Data
require(ggplot2)
ggplot(df_postgres, aes(x = as.factor(cyl), y = mpg, fill = as.factor(cyl))) +
geom_boxplot() + theme_bw()
dbWriteTable(con, "gdelt.cartable",
value = df, append = TRUE, row.names = FALSE)
?dbWriteTable
source(PostGres_connect)
source(PostGres_connect.R)
source("PostGres_connect.R")
setwd("C:/Users/Frederik/Documents/GitHub/Ethnic-Conflict-Prediction")
source("PostGres_connect.R")
dbExistsTable(con, "gdelt")
dbWriteTable(con, "gdelt",
value = Output, append = TRUE, row.names = FALSE)
df_postgres <- dbGetQuery(con, "SELECT * from gdelt")
identical(Output, df_postgres)
