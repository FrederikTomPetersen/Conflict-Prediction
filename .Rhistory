Samlet_WFS
View(data)
View(data_geo)
View(test)
View(data_geo)
gdalUtils::ogrinfo(Samlet_WFS, so = FALSE)
library(gdalUtils)
library(rgdal)
library(rwfs)
library(sp)
#Først laves der en base URL til Goserveren:
WFS_PDK_BASE <- "https://geoserver.plandata.dk/geoserver/wfs?servicename=wfs&"
#Dernæst gøres defineres versionering og Typename=
service <- "Version=1.0.0&SERVICE=WFS&request=getfeature&Typename="
#Derefter laves en liste af de temaer på WFS'en der vil hentes
LP <- "pdk:theme_pdk_lokalplan_vedtaget_v"
#Definering af sorterings parametre
filter <- "CQL_FILTER=komnr=101"
#Oprettelse af Den samlede WFS
Samlet_WFS <- paste0(WFS_PDK_BASE, service, LP, filter)
start_time1 <- Sys.time()
temp_folder <- "C:/Users/Frederik/Downloads/"
start_time3 <- Sys.time()
# Get data
dest_file <- file.path(temp_folder, paste0(hel_layers[16], ".gml"))
download.file(Samlet_WFS, dest_file, method = "internal", quiet = TRUE)
dest_file <- file.path(temp_folder, paste0("hel_layers[16]", ".gml"))
download.file(Samlet_WFS, dest_file, method = "internal", quiet = TRUE)
#Definering af sorterings parametre
filter <- "&CQL_FILTER=komnr=101"
#Oprettelse af Den samlede WFS
Samlet_WFS <- paste0(WFS_PDK_BASE, service, LP, filter)
start_time1 <- Sys.time()
temp_folder <- "C:/Users/Frederik/Downloads/"
start_time3 <- Sys.time()
# Get data
dest_file <- file.path(temp_folder, paste0("hel_layers[16]", ".gml"))
download.file(Samlet_WFS, dest_file, method = "internal", quiet = TRUE)
Samlet_WFS
https://geoserver.plandata.dk/geoserver/wfs?servicename=wfs&Version=1.0.0&SERVICE=WFS&request=getfeature&Typename=pdk:theme_pdk_lokalplan_vedtaget_v&cql_filter=komnr=101
#Først laves der en base URL til Goserveren:
WFS_PDK_BASE <- "https://geoserver.plandata.dk/geoserver/wfs?servicename=wfs&"
#Dernæst gøres defineres versionering og Typename=
service <- "Version=1.0.0&SERVICE=WFS&request=getfeature&Typename="
#Derefter laves en liste af de temaer på WFS'en der vil hentes
LP <- "pdk:theme_pdk_lokalplan_vedtaget_v"
#Definering af sorterings parametre
filter <- "&cql_filter=komnr=101"
#Oprettelse af Den samlede WFS
Samlet_WFS <- paste0(WFS_PDK_BASE, service, LP, filter)
start_time1 <- Sys.time()
temp_folder <- "C:/Users/Frederik/Downloads/"
start_time3 <- Sys.time()
dest_file <- file.path(temp_folder, paste0("LOKALPLABER", ".gml"))
download.file(Samlet_WFS, dest_file, method = "internal", quiet = TRUE)
ogrinfo(Samlet_WFS)
ogrinfo(Samlet_WFS)
ogrinfo(Samlet_WFS, so = TRUE)
Core <- paste0(WFS_PDK_BASE, service)
ogrinfo(Core, so = TRUE)
library(gdalUtils)
library(rgdal)
dsn <- "WFS:http://geomap.reteunitaria.piemonte.it/ws/gsareprot/rp-01/areeprotwfs/wfs_gsareprot_1?service=WFS&request=getCapabilities"
ogrinfo(dsn, so=TRUE)
ogr2ogr(dsn, "sic.shp", "SIC")
sic <- readOGR("sic.shp", "sic", stringsAsFactors=FALSE)
plot(sic)
#Først laves der en base URL til Goserveren:
WFS_PDK_BASE <- "WFS:https://geoserver.plandata.dk/geoserver/wfs?servicename=wfs&"
#Dernæst gøres defineres versionering og Typename=
service <- "Version=1.0.0&SERVICE=WFS&request=getfeature&Typename="
#Derefter laves en liste af de temaer på WFS'en der vil hentes
LP <- "pdk:theme_pdk_lokalplan_vedtaget_v"
#Definering af sorterings parametre
filter <- "&cql_filter=komnr=101"
#Oprettelse af Den samlede WFS
Core <- paste0(WFS_PDK_BASE, service)
Samlet_WFS <- paste0(WFS_PDK_BASE, service, LP, filter)
service <- "Version=1.0.0&SERVICE=WFS&request=getCapabilities"
Core <- paste0(WFS_PDK_BASE, service)
ogrinfo(Core, so = TRUE)
a <- https://geoserver.plandata.dk/geoserver/wfs?servicename=wfs&request=getcapabilities&service=wfs
a <- "https://geoserver.plandata.dk/geoserver/wfs?servicename=wfs&request=getcapabilities&service=wfs"
ogrinfo(a, so = T)
ogrinfo(a)
library(rgdal)
ogrinfo(a)
?ogrinfo
ogrinfo(a, layer =pdk:theme_pdk_lokalplan_vedtaget_v)
ogrinfo(a, layer ="pdk:theme_pdk_lokalplan_vedtaget_v")
a <- "http://geoserver.plandata.dk/geoserver/wfs?servicename=wfs&request=getcapabilities&service=wfs"
ogrinfo(a)
?ogr2ogr
ogr2ogr(a, "test.shp", "pdk:theme_pdk_tilslutningspligtomraade_vedtaget_v")
sic <- readOGR("test.shp", "dk:theme_pdk_tilslutningspligtomraade_vedtaget_v", stringsAsFactors=FALSE)
ogrinfo(dsn, so=TRUE)
ogr2ogr(a, "test.shp", "pdk:theme_pdk_tilslutningspligtomraade_vedtaget_v")
sic <- readOGR("test.shp", "dk:theme_pdk_tilslutningspligtomraade_vedtaget_v", stringsAsFactors=FALSE)
sic <- readOGR("test.shp", "pdk:theme_pdk_tilslutningspligtomraade_vedtaget_v", stringsAsFactors=FALSE)
?readOGR
ogrinfo(dsn, so=TRUE)
## [1] "Had to open data source read only."
## [2] "INFO: Open of `WFS:http://geomap.reteunitaria.piemonte.it/ws/gsareprot/rp-01/areeprotwfs/wfs_gsareprot_1?service=WFS&request=getCapabilities'"
## [3] "      using driver `WFS' successful."
## [4] "1: AreeProtette"
## [5] "2: ZPS"
## [6] "3: SIC"
ogr2ogr(dsn, "sic.shp", "SIC")
dsn_hel1 <- "WFS:http://kartta.hel.fi/ws/geoserver/avoindata/wfs?version=1.1.0&REQUEST=GetCapabilities"
hel_layers <- rgdal::ogrListLayers(dsn_hel1)
dsn_hel1 <- "WFS:http://kartta.hel.fi/ws/geoserver/avoindata/wfs?version=1.1.0&REQUEST=GetCapabilities"
hel_layers <- rgdal::ogrListLayers(dsn_hel1)
hel_rp1 <- rgdal::readOGR(dsn_hel1, layer = hel_layers[16])
View(København)
?save
save(foo, København ="København.Rda")
save(København ="København.Rda")
save(København, file ="København.Rda")
library(gdalUtils)
library(rgdal)
library(rwfs)
library(sp)
library(rgdal)
install.packages("rwfs")
install.packages("devtools")
library("devtools")
devtools::install_github("ropengov/rwfs")
library(gdalUtils)
library(rgdal)
library(rwfs)
library(sp)
library(rgdal)
ogrinfo(core, so=TRUE)
WFS_PDK_BASE <- "WFS:https://geoserver.plandata.dk/geoserver/wfs?servicename=wfs&"
#Dernæst gøres defineres versionering og Typename=
service <- "Version=1.0.0&SERVICE=WFS&request=getCapabilities"
#Derefter laves en liste af de temaer på WFS'en der vil hentes
LP <- "pdk:theme_pdk_lokalplan_vedtaget_v"
#Definering af sorterings parametre
filter <- "&cql_filter=komnr=101"
#Oprettelse af Den samlede WFS
Core <- paste0(WFS_PDK_BASE, service)
Samlet_WFS <- paste0(WFS_PDK_BASE, service, LP, filter)
ogrinfo(core, so=TRUE)
ogrinfo(core, so=TRUE)
ogrinfo(Core, so=TRUE)
?ogrinfo
ogrinfo(Core)
ogrListLayers(Core)
ogrinfo(Samlet_WFS)
ogrListLayers(Samlet_WFS)
test<-"https://geoserver.plandata.dk/geoserver/wfs?servicename=wfs&request=getcapabilities&service=wfs"
ogrinfo(test)
ogrListLayers(test)
ogrListLayers("test")
ogrinfo("test")
test<-"http://geoserver.plandata.dk/geoserver/wfs?servicename=wfs&request=getcapabilities&service=wfs"
ogrinfo("test")
ogrinfo(test)
ogr2ogr(test, "test.shp", "pdk:theme_pdk_lokalplan_vedtaget_v")
a<-ogr2ogr(test, "test.shp", "pdk:theme_pdk_lokalplan_vedtaget_v")
header <- read_lines("http://geoserver.plandata.dk/geoserver/wfs?servicename=wfs&request=getcapabilities", n_max = 1)
library(readr)
header <- read_lines("http://geoserver.plandata.dk/geoserver/wfs?servicename=wfs&request=getcapabilities", n_max = 1)
strsplit(header, ",")
header <- read_lines(Samlet, n_max = 1)
header <- read_lines(Samlet_WFS, n_max = 1)
#Først laves der en base URL til Goserveren:
WFS_PDK_BASE <- "WFS:http://geoserver.plandata.dk/geoserver/wfs?servicename=wfs&"
#Dernæst gøres defineres versionering og Typename=
service <- "Version=1.0.0&SERVICE=WFS&request=getCapabilities"
#Derefter laves en liste af de temaer på WFS'en der vil hentes
LP <- "pdk:theme_pdk_lokalplan_vedtaget_v"
#Definering af sorterings parametre
filter <- "&cql_filter=komnr=101"
e <- paste0(WFS_PDK_BASE, service)
Samlet_WFS <- paste0(WFS_PDK_BASE, service, LP, filter)
header <- read_lines(Samlet_WFS, n_max = 1)
Samlet_WFS <- paste0(WFS_PDK_BASE, service, LP)
header <- read_lines(Samlet_WFS, n_max = 1)
ogrinfo(Samlet_WFS)
readOGR("test.shp", pdk:theme_pdk_zonekort_v)
a <- ogr2ogr(Samlet_WFS, "test.shp", "pdk:theme_pdk_zonekort_v")
a <- ogr2ogr(Samlet_WFS, "test.shp")
Link = http://dawa.aws.dk/adresser?format=csv&kommunekode=0751
Link = "http://dawa.aws.dk/adresser?format=csv&kommunekode=0751"
test <- fread(Link, encoding = "UTF-8")
X <- read.csv(url("Link"))
X <- url("Link"))
X <- url("Link")
Link = "http://dawa.aws.dk/adresser?format=csv&kommunekode=0751.csv"
X <- read.csv(url("Link"))
addr <- fread("C:/Users/Frederik/Documents/scrape af boligdata/Adresse CSV/Århus.csv", encoding = "UTF-8")
library("rvest")
library("stringr")
library("ggplot2")
library("ggmap")
library("tidyr")
library("viridis")
library("broom")
library("maptools")
library("caret")
library("dplyr")
library("plyr")
library("scales")
addr <- fread("C:/Users/Frederik/Documents/scrape af boligdata/Adresse CSV/Århus.csv", encoding = "UTF-8")
addr <- fread("C:/Users/Frederik/Documents/scrape af boligdata/Adresse CSV/Århus.csv", encoding = "UTF-8")
library("data.table")
addr <- fread("C:/Users/Frederik/Documents/scrape af boligdata/Adresse CSV/Århus.csv", encoding = "UTF-8")
addr <- data.frame(addr)
subaddr = unique(addr[c("vejnavn","husnr","wgs84koordinat_bredde", "wgs84koordinat_længde", "postnr",
"postnrnavn","nøjagtighed", "højde")])
devtools::install_github("tidyverse/ggplot2")
devtools::install_github("r-lib/rlang")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("r-lib/rlang")
library("gdeltr2")
library("gdeltr2")
devtools::install_github("abresler/gdeltr2")
devtools::install_github("abresler/gdeltr2")
library("curl")
install.packages("curl")
devtools::install_github("abresler/gdeltr2")
install.packages("purrrlyr")
devtools::install_github("abresler/gdeltr2")
get_urls_gdelt_event_log()
Library(gdeltr2)
Library("gdeltr2")
Library("gdeltr2")
library("gdeltr2")
get_urls_gdelt_event_log()
get_urls_gkg_15_minute_log
?get_urls_gkg_15_minute_log
get_urls_gkg_15_minute_log(gkg)
a <-  get_urls_gkg_tv_daily_summaries
get_urls_gkg_tv_daily_summaries
a
get_codes_stability_locations()
stability_locations <-  get_codes_stability_locations()
View(stability_locations)
angola <-  get_data_locations_instability_api(angola)
?get_data_locations_instability_api()
View(stability_locations)
test <-  get_data_locations_instability_api(location_ids = c("US", "IS", "TU"),
random_locations = NULL, variable_names = c("instability", "conflict",
"tone", "protest", "artvolnorm"), days_moving_average = NA,
time_periods = "daily", use_multi_locations = F, return_wide = T,
visualize = F, nest_data = F, return_message = T)
View(test)
A_code <- c("BC")
A_code <- c("BC", "BH", "BN")
test <-  get_data_locations_instability_api(location_ids = A_code,
random_locations = NULL, variable_names = c("instability", "conflict",
"tone", "protest", "artvolnorm"), days_moving_average = NA,
time_periods = "daily", use_multi_locations = F, return_wide = T,
visualize = F, nest_data = F, return_message = T)
test <-  get_data_locations_instability_api(location_ids = A_code,
random_locations = NULL, variable_names = c("instability", "conflict",
"tone", "protest", "artvolnorm"), days_moving_average = NA,
time_periods = "monthly", use_multi_locations = F, return_wide = T,
visualize = F, nest_data = F, return_message = T)
test <-  get_data_locations_instability_api(location_ids = A_code,
random_locations = NULL, variable_names = c("instability", "conflict",
"tone", "protest", "artvolnorm"), days_moving_average = NA,
time_periods = "daily", use_multi_locations = F, return_wide = T,
visualize = T, nest_data = F, return_message = T)
install.packages("hrbrthemes")
library("gdeltr2", "hrbrthemes")
library("hrbrthemes")
test <-  get_data_locations_instability_api(location_ids = A_code,
random_locations = NULL, variable_names = c("instability", "conflict",
"tone", "protest", "artvolnorm"), days_moving_average = NA,
time_periods = "daily", use_multi_locations = F, return_wide = T,
visualize = T, nest_data = F, return_message = T)
View(test)
plot(test)
A_code <- c("BC", "BH", "BN", "CD", "CF", "CG")
A_code <- c("BC", "BH", "BN", "CD", "CF", "CG")
African_tone <-  get_data_locations_instability_api(location_ids = A_code,
random_locations = NULL, variable_names = c("instability", "conflict",
"tone", "protest", "artvolnorm"), days_moving_average = NA,
time_periods = "daily", use_multi_locations = F, return_wide = T,
visualize = T, nest_data = F, return_message = T)
plot(African_tone)
source('~/Konflikt/scripts/Packages.R')
A_code <- c("BC", "BH", "BN", "CD", "CF", "CG")
African_tone_visualize <-  get_data_locations_instability_api(location_ids = A_code,
random_locations = NULL, variable_names = c("instability", "conflict",
"tone", "protest", "artvolnorm"), days_moving_average = NA,
time_periods = "daily", use_multi_locations = F, return_wide = T,
visualize = T, nest_data = F, return_message = T)
A_code <- c("BC", "BH", "BN", "CD", "CF", "CG")
African_tone_visualize <-  get_data_locations_instability_api(location_ids = A_code,
random_locations = NULL, variable_names = c("instability", "conflict",
"tone", "protest", "artvolnorm"), days_moving_average = NA,
time_periods = "daily", use_multi_locations = F, return_wide = T,
visualize = T, nest_data = F, return_message = T)
African_tone <-  get_data_locations_instability_api(location_ids = A_code,
random_locations = NULL, variable_names = c("instability", "conflict",
"tone", "protest", "artvolnorm"), days_moving_average = NA,
time_periods = "daily", use_multi_locations = F, return_wide = T,
visualize = F, nest_data = F, return_message = T)
plot(African_tone_visualize)
install.packages("MS-BVAR")
install.packages("MSBVAR")
library("gdeltr2")
library("hrbrthemes")
install.packages("gdeltr2")
Install.packages("hrbrthemes")
Install.packages("hrbrthemes")
event_log <-   get_urls_gdelt_event_log()
event_url_list <- event_log$urlData
event_log <-   get_urls_gdelt_event_log()
event_url_list <- event_log$urlData
library("gdeltr2")
install.packages("gdeltr2")
install.packages("gdeltr1","hrbrthemes")
install.packages("gdeltr2")
install.packages("devtools")
library("devtools")
devtools::install_cran("gdeltr2")
devtools::install_github("gdeltr2")
devtools::install_github("abresler/gdeltr2")
devtools::install_cran("trelliscopejs")
install.packages("trelliscopejs")
devtools::install_github("hafen/trelliscopejs")
devtools::install_github("abresler/gdeltr2")
install.packages("purrrlyr")
library("purrrlyr")
devtools::install_github("abresler/gdeltr2")
?gdeltr2
??gdeltr2
?get_schema_gdelt_events
get_schema_gdelt_events
library("gdeltr2")
url <-  get_urls_gdelt_event_log(
)
View(url)
All_eventdb_url <-  get_urls_gdelt_event_log()
rm(url)
Event_url_list <- event_log$urlData
Event_url_list <- All_eventdb_url$urlData
str(Event_url_list)
Event_udvalg <- Event_url_list[5]
Event_udvalg <- Event_url_list[5,]
Event_udvalg <- Event_url_list[[5]]
Event_udvalg <- Event_url_list[1,5]
Event_udvalg <- Event_url_list[1:5]
Event_udvalg_1 <- Event_url_list[1]
activity_url <- Event_udvalg_1
temp <- tempfile()
download.file(activity_url, temp)
unzip(temp, "activity.csv")
activity_url
library("devtools")
library("gdeltr2")
library("hrbrthemes")
library("tidyverse")
library("countrycode")
library("xlsx")
library("data.table")
All_eventdb_url <-  get_urls_gdelt_event_log()
Event_url_list <- All_eventdb_url$urlData
View(All_eventdb_url)
Event_1979_2005 <- Event_url_list[2:28]
Gdelt_header <-  "https://www.gdeltproject.org/data/lookups/CSV.header.fieldids.xlsx"
Gdelt_header  <-  read.xlsx(Gdelt_header)
library("xlsx")
library("XLSX")
library("xlsx-package")
install.package("xlsx-package")
Gdelt_header  <-  fread("Lande.csv")
my_workspace = "C:/Users/Frederik/Documents/konflikt/"
setwd(my_workspace)
Gdelt_header  <-  fread("Lande.csv")
collist <-  colnames(Gdelt_header[1:57])
colnames(table) <- collist
Gdelt_header  <-  fread("GDELT_HEADER.csv")
collist <-  colnames(Gdelt_header[1:57])
colnames(table) <- collist
Gdelt_header  <-  read("GDELT_HEADER.csv")
Gdelt_header  <-  read("GDELT_HEADER.csv")
Gdelt_header  <-  fread("GDELT_HEADER.csv")
collist <-  colnames(Gdelt_header[1:57])
colnames(table) <- collist
Gdelt_header <- Gdelt_header[,1]
collist <-  colnames(Gdelt_header[1:57])
colnames(table) <- collist
Event <- Event_url_list[2]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Gdelt_Data <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <-  Gdelt_Data[0,]
Table <-  fread(Tablename)
colnames(Table) <-  collist
collist <-  colnames(Gdelt_header[1:57])
collist <-  colnames(Gdelt_header[1:57])
Gdelt_header <-  "https://github.com/FrederikTomPetersen/Ethnic-Conflict-Prediction/tree/master/Data/GDELT_HEADER.csv"
Gdelt_header  <-  fread(Gdelt_header)
Gdelt_header  <-  read_excel("GDELT_HEADER.xlsx")
??read_excel
install.packages("readxl")
install.packages("readxl")
library("devtools")
library("gdeltr2")
library("hrbrthemes")
library("tidyverse")
library("countrycode")
library("readxl")
library("data.table")
Gdelt_header <-  "https://github.com/FrederikTomPetersen/Ethnic-Conflict-Prediction/tree/master/Data/GDELT_HEADER.csv"
Gdelt_header  <-  read_excel("GDELT_HEADER.xlsx")
View(Gdelt_header)
collist <-  colnames(Gdelt_header[1:57])
colnames(table) <- collist
Iterations <- length(Event_1979_2005)
Iterations_left =Iterations
#Counter
Iterations <- length(Event_1979_2005)
Iterations_left =Iterations
Event <- Event_url_list[2]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Gdelt_Data <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <-  Gdelt_Data[0,]
#Oprettelse af lister til filter:
Countries <-  fread("https://github.com/FrederikTomPetersen/Ethnic-Conflict-Prediction/blob/master/Data/Lande.csv")
Africa = Countries %>%
filter(continent == "AF")
Africa_List <-  Africa$isoAlpha3
Eventtypes <- c("025","024", "142", "141", "145", "140", "130", "123")
Countries <-  read_excel("https://github.com/FrederikTomPetersen/Ethnic-Conflict-Prediction/blob/master/Data/Lande.xlsx")
Countries <-  read_excel("https://github.com/FrederikTomPetersen/Ethnic-Conflict-Prediction/tree/master/Data/Lande.xlsx")
Countries <-  fread("https://github.com/FrederikTomPetersen/Ethnic-Conflict-Prediction/tree/master/Data/Lande.xlsx")
Countries <-  fread("https://github.com/FrederikTomPetersen/Ethnic-Conflict-Prediction/tree/master/Data/Lande.csv")
Countries <-  fread("/Lande.csv")
Countries <-  fread("Lande.csv")
Africa = Countries %>%
filter(continent == "AF")
Africa_List <-  Africa$isoAlpha3
Eventtypes <- c("025","024", "142", "141", "145", "140", "130", "123")
Event <- Event_url_list[2]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Gdelt_Data <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <-  Gdelt_Data[0,]
colnames(Gdelt_Data) <- collist
rm(Table, Gdelt_header, Countries)
Gdelt_getter = function(x, m) {
#x = liste af url'er
#m = startåret
for (i in x){
paste("Download nummer", m)
Event <- x[m]
Basefile <- basename(Event)
Basename <- substring(Basefile,1,4)
download.file(Event, Basefile)
unzip(Basefile)
Tablename <- paste0(Basename,".csv")
Table <-  fread(Tablename)
colnames(Table) <-  collist
Table <- Table %>%
filter(Actor1CountryCode %in% Africa_List |Actor2CountryCode %in% Africa_List) %>%
filter(EventBaseCode %in% Eventtypes)
Gdelt_Data <- rbind(Gdelt_Data, Table)
rm(Table)
unlink(Basefile)
unlink(paste0(Basename,".csv"))
print(paste("der er", length(x)-m, " tilbage af", length(x), "iterationer"))
Iterations_left = Iterations_left-1
m = m + 1
Sys.time()
Sys.sleep(10)
}
return(Gdelt_Data)
}
Output <-  Gdelt_getter(Event_1979_2005, 1)
setwd("C:/Users/Frederik/Documents/GitHub/Ethnic-Conflict-Prediction")
source("PostGres_connect.R")
dbExistsTable(con, "gdelt")
# False
dbWriteTable(con, "gdelt",
value = Output, append = TRUE, row.names = FALSE)
df_postgres <- dbGetQuery(con, "SELECT * from gdelt")
identical(Output, df_postgres)
library(readxl)
EventCodeSort <- read_excel("Data/EventCodeSort.xlsx",
col_types = c("numeric", "text"))
View(EventCodeSort)
Eventcodes <- EventCodeSort[1]
