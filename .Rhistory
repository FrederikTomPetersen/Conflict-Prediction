library("hrbrthemes")
library("tidyverse")
library("countrycode")
library("readxl")
library("data.table")
require("RPostgreSQL")
#genereal
library("dplyr")
library("tidyverse")
library("data.table")
#world bank development indicators
library(WDI)
# rWBclimate
library(rWBclimate)
#visualisering
library(ggplot2)
Gdelt1 <- dbGetQuery(con, "SELECT * from gdelt2000_2006,1000")
Gdelt2 <- dbGetQuery(con, "SELECT * from gdelt2006_2010,1000")
Gdelt3 <- dbGetQuery(con, "SELECT * from gdelt2011,1000")
Gdelt4 <- dbGetQuery(con, "SELECT * from gdelt2012,1000")
Gdelt5 <- dbGetQuery(con, "SELECT * from gdelt2013,1000")
Gdelt6 <- dbGetQuery(con, "SELECT * from gdelt2014,1000")
Gdelt7 <- dbGetQuery(con, "SELECT * from gdelt2015,1000")
Gdelt8 <- dbGetQuery(con, "SELECT * from gdelt2016,1000")
Gdelt1 <- dbGetQuery(con, "SELECT * from gdelt2000_2006, limit 1000")
Gdelt1 <- dbGetQuery(con, "SELECT * from gdelt2000_2006 limit 1000")
Gdelt2 <- dbGetQuery(con, "SELECT * from gdelt2006_2010 limit 1000")
Gdelt3 <- dbGetQuery(con, "SELECT * from gdelt2011 limit 1000")
Gdelt4 <- dbGetQuery(con, "SELECT * from gdelt2012 limit 1000")
Gdelt5 <- dbGetQuery(con, "SELECT * from gdelt2013 limit 1000")
Gdelt6 <- dbGetQuery(con, "SELECT * from gdelt2014 limit 1000")
Gdelt7 <- dbGetQuery(con, "SELECT * from gdelt2015 limit 1000")
Gdelt8 <- dbGetQuery(con, "SELECT * from gdelt2016 limit 1000")
vector_of_df <- c(Gdelt1,Gdelt2,Gdelt3,Gdelt4,Gdelt5,Gdelt6,Gdelt7,Gdelt8)
Gdelt_tidy_looper = function(x) {
for (i in x) {
x <-  Create_Date(x)
x <- x %>%
mutate(date = as.Date(paste0(year, '.', month, '.', 1), format = "%Y.%m.%d"))
x$EventCode <- as.numeric(x$EventCode)
x <- Event_Classifier(x)
x <-  Gdelt_Keeper(x)
x <- x %>%
filter(!is.na(ActionGeo_CountryCode) | ActionGeo_CountryCode !="") %>%
group_by(ActionGeo_CountryCode, year, month, EventClass)
x <-  x %>%
summarize(Num_events = n(),
tone = mean(AvgTone),
Goldstein = mean(GoldsteinScale)) %>%
arrange(ActionGeo_CountryCode, year, month)
dbWriteTable(con, "gdelt",
value = x, append = TRUE, row.names = FALSE)
}
}
Gdelt_tidy_looper = function(x) {
for (i in x) {
x <-  Create_Date(x)
x <- x %>%
mutate(date = as.Date(paste0(year, '.', month, '.', 1), format = "%Y.%m.%d"))
x$EventCode <- as.numeric(x$EventCode)
x <- Event_Classifier(x)
x <-  Gdelt_Keeper(x)
x <- x %>%
filter(!is.na(ActionGeo_CountryCode) | ActionGeo_CountryCode !="") %>%
group_by(ActionGeo_CountryCode, year, month, EventClass)
x <-  x %>%
summarize(Num_events = n(),
tone = mean(AvgTone),
Goldstein = mean(GoldsteinScale)) %>%
arrange(ActionGeo_CountryCode, year, month)
dbWriteTable(con, "test_gdelt",
value = x, append = TRUE, row.names = FALSE)
}
}
Gdelt_tidy_looper(vector_of_df)
Gdelt_tidy_looper = function(x) {
x <-  Create_Date(x)
x <- x %>%
mutate(date = as.Date(paste0(year, '.', month, '.', 1), format = "%Y.%m.%d"))
x$EventCode <- as.numeric(x$EventCode)
x <- Event_Classifier(x)
x <-  Gdelt_Keeper(x)
x <- x %>%
filter(!is.na(ActionGeo_CountryCode) | ActionGeo_CountryCode !="") %>%
group_by(ActionGeo_CountryCode, year, month, EventClass)
x <-  x %>%
summarize(Num_events = n(),
tone = mean(AvgTone),
Goldstein = mean(GoldsteinScale)) %>%
arrange(ActionGeo_CountryCode, year, month)
dbWriteTable(con, "test_gdelt",
value = x, append = TRUE, row.names = FALSE)
}
Gdelt_tidy_looper(vector_of_df)
Gdelt_tidy_looper(Gdelt1)
Gdelt_tidy_looper(Gdelt2)
test <- dbGetQuery(con, "SELECT * from test_gdelt")
Gdelt_processor = function(x) {
x <-  Create_Date(x)
x <- x %>%
mutate(date = as.Date(paste0(year, '.', month, '.', 1), format = "%Y.%m.%d"))
x$EventCode <- as.numeric(x$EventCode)
x <- Event_Classifier(x)
x <-  Gdelt_Keeper(x)
x <- x %>%
filter(!is.na(ActionGeo_CountryCode) | ActionGeo_CountryCode !="") %>%
group_by(ActionGeo_CountryCode, year, month, EventClass)
x <-  x %>%
summarize(Num_events = n(),
tone = mean(AvgTone),
Goldstein = mean(GoldsteinScale)) %>%
arrange(ActionGeo_CountryCode, year, month)
dbWriteTable(con, "test_gdelt",
value = x, append = TRUE, row.names = FALSE)
}
Gdelt1 <- dbGetQuery(con, "SELECT * from gdelt2000_2006")
rm(Gdelt2,Gdelt3,Gdelt4,Gdelt5,Gdelt6;Gdelt7,Gdelt8)
rm(Gdelt2,Gdelt3,Gdelt4,Gdelt5,Gdelt6,Gdelt7,Gdelt8)
rm(test,vector_of_df)
Gdelt_processor = function(x) {
x <-  Create_Date(x)
x <- x %>%
mutate(date = as.Date(paste0(year, '.', month, '.', 1), format = "%Y.%m.%d"))
x$EventCode <- as.numeric(x$EventCode)
x <- Event_Classifier(x)
x <-  Gdelt_Keeper(x)
x <- x %>%
filter(!is.na(ActionGeo_CountryCode) | ActionGeo_CountryCode !="") %>%
group_by(ActionGeo_CountryCode, year, month, EventClass)
x <-  x %>%
summarize(Num_events = n(),
tone = mean(AvgTone),
Goldstein = mean(GoldsteinScale)) %>%
arrange(ActionGeo_CountryCode, year, month)
dbWriteTable(con, "test_gdelt",
value = x, append = TRUE, row.names = FALSE)
}
Gdelt_processor = function(x) {
x <-  Create_Date(x)
x <- x %>%
mutate(date = as.Date(paste0(year, '.', month, '.', 1), format = "%Y.%m.%d"))
x$EventCode <- as.numeric(x$EventCode)
x <- Event_Classifier(x)
x <-  Gdelt_Keeper(x)
x <- x %>%
filter(!is.na(ActionGeo_CountryCode) | ActionGeo_CountryCode !="") %>%
group_by(ActionGeo_CountryCode, year, month, EventClass)
x <-  x %>%
summarize(Num_events = n(),
tone = mean(AvgTone),
Goldstein = mean(GoldsteinScale)) %>%
arrange(ActionGeo_CountryCode, year, month)
dbWriteTable(con, "gdelt_group",
value = x, append = TRUE, row.names = FALSE)
}
Gdelt_processor(Gdelt1)
rm(Gdelt1)
Gdelt2 <- dbGetQuery(con, "SELECT * from gdelt2006_2010")
Gdelt_processor(Gdelt2)
rm(Gdelt2)
Gdelt3 <- dbGetQuery(con, "SELECT * from gdelt2011")
Gdelt_processor(Gdelt3)
rm(Gdelt3)
Gdelt4 <- dbGetQuery(con, "SELECT * from gdelt2012")
Gdelt_processor(Gdelt4)
rm(Gdelt4)
Gdelt5 <- dbGetQuery(con, "SELECT * from gdelt2013")
Gdelt_processor(Gdelt5)
rm(Gdelt5)
Gdelt6 <- dbGetQuery(con, "SELECT * from gdelt2014")
Gdelt_processor(Gdelt6)
rm(Gdelt6)
Gdelt7 <- dbGetQuery(con, "SELECT * from gdelt2015")
Gdelt_processor(Gdelt7)
rm(Gdelt7)
Gdelt8 <- dbGetQuery(con, "SELECT * from gdelt2016")
Gdelt_processor(Gdelt8)
rm(Gdelt8)
load("~/Konflikt/country.RData")
#Possible workspaces - adjust to your local preferences
DataCave = "C:/Users/Frederik/Documents/SpecialeData/"
Private = "C:/Users/Frederik/Documents/SpecialeScripts/"
GitHub = "C:/Users/Frederik/Documents/GitHub/Ethnic-Conflict-Prediction"
Models = "C:/Users/Frederik/Documents/SpecialeModels/"
# This scripts binds the dataanalysis of my thesis. It aims to control
# the workflow of the project. it starts out by loading all the necessary packages
# for the project. Then it defines alle the functions neccesary for the later scripts.
# After this intial defintions it starts getting the data from different sources.
# When the datasets are gathered it will automatically begin to tidy the data in order to make af join possible
# after the data are gathered
setwd(GitHub)
source("Packages.R")
source("Functions.R")
source("PostGres_connect.R")
conflicts_all <- dbGetQuery(con, "SELECT * from ged_disaggregated")
# Creating approx date
conflicts_all$date_start = as.Date(conflicts_all$date_start)
conflicts_all$date_end = as.Date(conflicts_all$date_end)
conflicts_all$date_mid <-  conflicts_all$date_start + floor((conflicts_all$date_end-conflicts_all$date_start)/2)
conflicts_all <- conflicts_all %>%
mutate(
year = as.numeric(format(date_mid, format = "%Y")),
month = as.numeric(format(date_mid, format = "%m")))
#internal conflicts
conflicts_internal <-  conflicts_all %>%
filter(is.na(gwnob))
#external conflicts
conflicts_external <- conflicts_all %>%
filter(!is.na(gwnob))
conflicts_all <- Total_Deaths(conflicts_all)
View(conflicts_all)
conflicts_all$total_deaths <- rowSums(conflicts_all[,c("deaths_a", "deaths_b", "deaths_unk", "deaths_civ")], na.rm=TRUE)
View(conflicts_all)
?cumsum
conflicts_all <-  data.table(conflicts_all)
conflicts_all <-  conflicts_all[, deaths_running_year := cumsum(total_deaths), by=list(country, year)]
conflicts_all <-  conflicts_all[, deaths_running_months := cumsum(total_deaths), by=list(country, year, month)]
View(conflicts_all)
conflicts_all <- conflicts_all %>%
mutate(
year = as.numeric(format(date_mid, format = "%Y")),
month = as.numeric(format(date_mid, format = "%m")),
day = as.numeric(format(date_mid, format = "%d")))
#internal conflicts
conflicts_internal <-  conflicts_all %>%
filter(is.na(gwnob))
#external conflicts
conflicts_external <- conflicts_all %>%
filter(!is.na(gwnob))
conflicts_all$total_deaths <- rowSums(conflicts_all[,c("deaths_a", "deaths_b", "deaths_unk", "deaths_civ")], na.rm=TRUE)
conflicts_all <-  data.table(conflicts_all) %>%
order_by(country,year,month,day)
conflicts_all <-  data.table(conflicts_all) %>%
order_by("country","year","month","day")
conflicts_all <-  data.table(conflicts_all)
conflicts_all <- conflicts_all %>%
order_by("country","year","month","day")
conflicts_all <- conflicts_all %>%
arrange(country,year,month,day)
conflicts_all <-  conflicts_all[, deaths_running_year := cumsum(total_deaths), by=list(country, year)]
conflicts_all <-  conflicts_all[, deaths_running_months := cumsum(total_deaths), by=list(country, year, month)]
conflicts_all <- dbGetQuery(con, "SELECT * from ged_disaggregated")
# Creating approx date
conflicts_all$date_start = as.Date(conflicts_all$date_start)
conflicts_all$date_end = as.Date(conflicts_all$date_end)
conflicts_all$date_mid <-  conflicts_all$date_start + floor((conflicts_all$date_end-conflicts_all$date_start)/2)
conflicts_all <- conflicts_all %>%
mutate(
year = as.numeric(format(date_mid, format = "%Y")),
month = as.numeric(format(date_mid, format = "%m")),
day = as.numeric(format(date_mid, format = "%d")))
conflicts_all$total_deaths <- rowSums(conflicts_all[,c("deaths_a", "deaths_b", "deaths_unk", "deaths_civ")], na.rm=TRUE)
####################################################################
#Running numbers, deaths on uear and month
conflicts_all <-  data.table(conflicts_all)
conflicts_all <- conflicts_all %>%
arrange(country,year,month,day)
conflicts_all <-  conflicts_all[, deaths_running_year := cumsum(total_deaths), by=list(country, year)]
conflicts_all <-  data.table(conflicts_all)
conflicts_all <-  conflicts_all[, deaths_running_year := cumsum(total_deaths), by=list(country, year)]
View(conflicts_all)
conflicts_all <-  conflicts_all[, deaths_running_months := cumsum(total_deaths), by=list(country, year, month)]
View(conflicts_all)
conflicts_all <- conflicts_all %>%
select(country,year,month,day,total_deaths,deaths_running_months,deaths_running_year) %>%
arrange(country,year,month,day)
conflicts_all <-  conflicts_all %>%
group_by(country, year)
conflicts_all <- conflicts_all %>%
mutate(death_year = sum(total_deaths))
conflicts_all <-  conflicts_all %>%
group_by(country, year, month)
conflicts_all <- conflicts_all %>%
mutate(death_month = sum(total_deaths))
View(conflicts_all)
# Er der Borgerkrig det givne år?
conflicts_all <-  conflicts_all %>%
mutate(civilwar = if(death_year >= 1000){
1
} else {
0
}
)
#Er borgerkrigen officielt brudt ud i den givne måned?
conflicts_all <- conflicts_all %>%
mutate(civilwar_month = if(deaths_running_months>=1000){
1
}else{
0
}
)
#Bidrager den givne måned
conflicts_all <- conflicts_all %>%
mutate(cw_month_contribute = if(death_month>=83){
1
}else{
0
}
)
View(conflicts_all)
conflicts_group <-  conflicts_all %>%
group_by(country, year, month)
conflict_grouped <- conflicts_all %>%
expand(year= 2000:2017, month = 1:12) %>%
left_join(conflicts_all) %>%
summarise(total_deaths = sum(total_deaths),
conflict_incidents = n()) %>%
arrange(country,year,month)
View(conflict_grouped)
?group_by
conflicts_all <- dbGetQuery(con, "SELECT * from ged_disaggregated")
# Creating approx date
conflicts_all$date_start = as.Date(conflicts_all$date_start)
conflicts_all$date_end = as.Date(conflicts_all$date_end)
conflicts_all$date_mid <-  conflicts_all$date_start + floor((conflicts_all$date_end-conflicts_all$date_start)/2)
conflicts_all <- conflicts_all %>%
mutate(
year = as.numeric(format(date_mid, format = "%Y")),
month = as.numeric(format(date_mid, format = "%m")),
day = as.numeric(format(date_mid, format = "%d")))
conflicts_all$total_deaths <- rowSums(conflicts_all[,c("deaths_a", "deaths_b", "deaths_unk", "deaths_civ")], na.rm=TRUE)
conflicts_all <- conflicts_all %>%
group_by(country,year,month)
conflicts_all <- conflicts_all %>%
summarise(total_deaths = sum(total_deaths),
conflict_incidents = n()) %>%
arrange(country,year,month)
View(conflicts_all)
conflict_expand <- conflicts_all %>%
expand(year= 1989:2017, month = 1:12)
conflict_expand <- conflicts_all %>%
expand(year= 1989:2017, month = 1:12)
conflict_test<- conflict_expand
left_join(conflicts_all)
conflicts_all <- conflicts_all %>%
expand(year= 1989:2017, month = 1:12) %>%
left_join(conflicts_all) %>%
summarise(total_deaths = sum(total_deaths),
conflict_incidents = n()) %>%
arrange(country,year,month)
conflicts_all <- dbGetQuery(con, "SELECT * from ged_disaggregated")
# Creating approx date
conflicts_all$date_start = as.Date(conflicts_all$date_start)
conflicts_all$date_end = as.Date(conflicts_all$date_end)
conflicts_all$date_mid <-  conflicts_all$date_start + floor((conflicts_all$date_end-conflicts_all$date_start)/2)
conflicts_all <- conflicts_all %>%
mutate(
year = as.numeric(format(date_mid, format = "%Y")),
month = as.numeric(format(date_mid, format = "%m")),
day = as.numeric(format(date_mid, format = "%d")))
conflicts_all$total_deaths <- rowSums(conflicts_all[,c("deaths_a", "deaths_b", "deaths_unk", "deaths_civ")], na.rm=TRUE)
conflicts_all <- conflicts_all %>%
group_by(country,year,month)
conflict_grouped <- conflicts_all %>%
expand(year= 1989:2017, month = 1:12) %>%
left_join(conflicts_all) %>%
summarise(total_deaths = sum(total_deaths),
conflict_incidents = n()) %>%
arrange(country,year,month)
conflicts_all <- dbGetQuery(con, "SELECT * from ged_disaggregated")
# Creating approx date
conflicts_all$date_start = as.Date(conflicts_all$date_start)
conflicts_all$date_end = as.Date(conflicts_all$date_end)
conflicts_all$date_mid <-  conflicts_all$date_start + floor((conflicts_all$date_end-conflicts_all$date_start)/2)
conflicts_all <- conflicts_all %>%
mutate(
year = as.numeric(format(date_mid, format = "%Y")),
month = as.numeric(format(date_mid, format = "%m")),
day = as.numeric(format(date_mid, format = "%d")))
conflicts_all$total_deaths <- rowSums(conflicts_all[,c("deaths_a", "deaths_b", "deaths_unk", "deaths_civ")], na.rm=TRUE)
conflicts_all <- conflicts_all %>%
group_by(country,year,month)
conflict_grouped <- conflicts_all %>%
summarise(total_deaths = sum(total_deaths),
conflict_incidents = n()) %>%
arrange(country,year,month)
View(conflict_grouped)
base <- conflict_all %>%
select(country,year, month) %>%
group_by(country,year, month) %>%
expand(year= 1989:2017, month = 1:12)
base <- conflicts_all %>%
select(country,year, month) %>%
group_by(country,year, month) %>%
expand(year= 1989:2017, month = 1:12)
View(base)
base <- conflicts_all %>%
select(country,year, month) %>%
group_by(country,year, month) %>%
expand(year= 2000:2017, month = 1:12)
test <-  base %>%
left_join(conflicts_all, by = c("country"="country", "year"="year", "month"="month"))
View(test)
View(test)
?left_join
test <-  base %>%
right_join(conflicts_all, by = c("country"="country", "year"="year", "month"="month"))
?join
test <-  base %>%
left_join(conflict_grouped, by = c("country"="country", "year"="year", "month"="month"))
View(test)
conflict <- conflict %>%
arrange(country,year,month)
conflict <-  base %>%
left_join(conflict_grouped, by = c("country"="country", "year"="year", "month"="month"))
conflict <- conflict %>%
arrange(country,year,month)
conflicts_all <-  data.table(conflicts_all)
conflicts_all <-  conflicts_all[, deaths_running_year := cumsum(total_deaths), by=list(country, year)]
conflicts_all <-  conflicts_all[, deaths_running_months := cumsum(total_deaths), by=list(country, year, month)]
conflicts_all <- dbGetQuery(con, "SELECT * from ged_disaggregated")
# Creating approx date
conflicts_all$date_start = as.Date(conflicts_all$date_start)
conflicts_all$date_end = as.Date(conflicts_all$date_end)
conflicts_all$date_mid <-  conflicts_all$date_start + floor((conflicts_all$date_end-conflicts_all$date_start)/2)
conflicts_all <- conflicts_all %>%
mutate(
year = as.numeric(format(date_mid, format = "%Y")),
month = as.numeric(format(date_mid, format = "%m")),
day = as.numeric(format(date_mid, format = "%d")))
conflicts_all$total_deaths <- rowSums(conflicts_all[,c("deaths_a", "deaths_b", "deaths_unk", "deaths_civ")], na.rm=TRUE)
conflicts_all <- conflicts_all %>%
group_by(country,year,month)
conflict_grouped <- conflicts_all %>%
summarise(total_deaths = sum(total_deaths),
conflict_incidents = n()) %>%
arrange(country,year,month)
base <- conflicts_all %>%
select(country,year, month) %>%
group_by(country,year, month) %>%
expand(year= 2000:2017, month = 1:12)
conflict <-  base %>%
left_join(conflict_grouped, by = c("country"="country", "year"="year", "month"="month"))
conflict <- conflict %>%
arrange(country,year,month)
conflict <-  data.table(conflict)
conflict <-  conflict[, deaths_running_year := cumsum(total_deaths), by=list(country, year)]
conflict <-  conflict[, deaths_running_months := cumsum(total_deaths), by=list(country, year, month)]
View(conflict)
View(conflict)
conflicts_all <- dbGetQuery(con, "SELECT * from ged_disaggregated")
# Creating approx date
conflicts_all$date_start = as.Date(conflicts_all$date_start)
conflicts_all$date_end = as.Date(conflicts_all$date_end)
conflicts_all$date_mid <-  conflicts_all$date_start + floor((conflicts_all$date_end-conflicts_all$date_start)/2)
conflicts_all <- conflicts_all %>%
mutate(
year = as.numeric(format(date_mid, format = "%Y")),
month = as.numeric(format(date_mid, format = "%m")),
day = as.numeric(format(date_mid, format = "%d")))
conflicts_all$total_deaths <- rowSums(conflicts_all[,c("deaths_a", "deaths_b", "deaths_unk", "deaths_civ")], na.rm=TRUE)
conflicts_all <- conflicts_all %>%
group_by(country,year,month)
conflict_grouped <- conflicts_all %>%
summarise(total_deaths = sum(total_deaths),
conflict_incidents = n()) %>%
arrange(country,year,month)
rm(conflict, conflict_expand, conflict_test)
rm(conflicts_internal,conflicts_external)
rm(conflicts_all)
rm(test)
rm(conflicts_group)
rm(conflict_grouped)
conflicts_all <- dbGetQuery(con, "SELECT * from ged_disaggregated")
# Creating approx date
conflicts_all$date_start = as.Date(conflicts_all$date_start)
conflicts_all$date_end = as.Date(conflicts_all$date_end)
conflicts_all$date_mid <-  conflicts_all$date_start + floor((conflicts_all$date_end-conflicts_all$date_start)/2)
conflicts_all <- conflicts_all %>%
mutate(
year = as.numeric(format(date_mid, format = "%Y")),
month = as.numeric(format(date_mid, format = "%m")),
day = as.numeric(format(date_mid, format = "%d")))
conflicts_all$total_deaths <- rowSums(conflicts_all[,c("deaths_a", "deaths_b", "deaths_unk", "deaths_civ")], na.rm=TRUE)
conflicts_all <- conflicts_all %>%
group_by(country,year,month)
conflict_grouped <- conflicts_all %>%
summarise(total_deaths = sum(total_deaths),
conflict_incidents = n()) %>%
arrange(country,year,month)
conflicts_all <- conflicts_all %>%
group_by(country,year,month)
base <- conflicts_all %>%
select(country,year, month) %>%
group_by(country,year, month) %>%
expand(year= 2000:2017, month = 1:12)
View(base)
conflicts_all <- conflicts_all %>%
group_by(country,year,month)
base <- conflicts_all %>%
select(country,year, month) %>%
expand(year= 2000:2017, month = 1:12)
?expand
onflicts_all <- conflicts_all %>%
ungroup(country,year,month)
base <- conflicts_all %>%
select(country,year, month) %>%
expand(year= 2000:2017, month = 1:12)
rm(onflicts_all)
conflicts_all <- conflicts_all %>%
ungroup(country,year,month)
base <- conflicts_all %>%
select(country,year, month) %>%
expand(year= 2000:2017, month = 1:12)
View(base)
base <- conflicts_all %>%
select(country,year, month) %>%
expand(country= country, year= 2000:2017, month = 1:12)
View(base)
conflict <-  base %>%
left_join(conflict_grouped, by = c("country"="country", "year"="year", "month"="month"))
View(conflict)
