geom_hline(yintercept=0.049, color="red", alpha=0.6)+
labs( y = "Sandsynlighed", x="", colour ="Prædiktionstype") +
scale_x_discrete(breaks=c("0","1"),
labels=c("ikke-borgerkrig \n y = 0", "Borgerkrig \n y = 1")) +
guides(color = guide_legend(override.aes = list(size=1, alpha = 1, default.unit = ""))) +
ggtitle("Random forest model") +
theme(plot.title = element_text(hjust = 0.5, size =12, face = "plain"))
densitet_rf_cwstart
plot_pred_type_distribution <- function(df, threshold) {
v <- rep(NA, nrow(df))
v <- ifelse(df$cwstart_pred_rf >= threshold & df$cwstart == 1, "TP", v)
v <- ifelse(df$cwstart_pred_rf >= threshold & df$cwstart == 0, "FP", v)
v <- ifelse(df$cwstart_pred_rf < threshold & df$cwstart == 1, "FN", v)
v <- ifelse(df$cwstart_pred_rf < threshold & df$cwstart == 0, "TN", v)
}
# Tilførelse af FP,FN,SP,SN til datasæt
test_data$pred_type <- plot_pred_type_distribution(test_data, 0.049)
#Plotting af densitet histogram med jitter og linje
densitet_rf_cwstart <- test_data %>%
ggplot(aes(as.factor(cwstart),cwstart_pred_rf)) +
geom_violin(mapping = NULL, data = test_data, stat = "ydensity",
position = "dodge", draw_quantiles = NULL, trim = TRUE,
scale = "width", na.rm = TRUE, show.legend = TRUE,
inherit.aes = TRUE)+
geom_jitter(aes(color=pred_type),data= test_data, alpha=0.2, width = 0.4)+
geom_hline(yintercept=0.049, color="red", alpha=0.6)+
labs( y = "Sandsynlighed", x="", colour ="Prædiktionstype") +
scale_x_discrete(breaks=c("0","1"),
labels=c("ikke-borgerkrig \n y = 0", "Borgerkrig \n y = 1")) +
guides(color = guide_legend(override.aes = list(size=1, alpha = 1, default.unit = ""))) +
ggtitle("Random forest model") +
theme(plot.title = element_text(hjust = 0.5, size =12, face = "plain"))
densitet_rf_cwstart
?geom_jitter()
#Plotting af densitet histogram med jitter og linje
densitet_rf_cwstart <- test_data %>%
ggplot(aes(as.factor(cwstart),cwstart_pred_rf)) +
geom_violin(mapping = NULL, data = test_data, stat = "ydensity",
position = "dodge", draw_quantiles = NULL, trim = TRUE,
scale = "width", na.rm = TRUE, show.legend = TRUE,
inherit.aes = TRUE)+
geom_jitter(aes(color=pred_type),data= test_data, alpha=0.2, width = 0.4, height = 0)+
geom_hline(yintercept=0.049, color="red", alpha=0.6)+
labs( y = "Sandsynlighed", x="", colour ="Prædiktionstype") +
scale_x_discrete(breaks=c("0","1"),
labels=c("ikke-borgerkrig \n y = 0", "Borgerkrig \n y = 1")) +
guides(color = guide_legend(override.aes = list(size=1, alpha = 1, default.unit = ""))) +
ggtitle("Random forest model") +
theme(plot.title = element_text(hjust = 0.5, size =12, face = "plain"))
densitet_rf_cwstart
#--------------------------------------------
#       Advanced ROC
#Oprettelse af genereisk plot function:
plot_roc <- function(roc, threshold, cost_of_fp, cost_of_fn) {
norm_vec <- function(v) (v - min(v))/diff(range(v))
idx_threshold = which.min(abs(roc$threshold-threshold))
col_ramp <- colorRampPalette(c("green","orange","red","black"))(100)
col_by_cost <- col_ramp[ceiling(norm_vec(roc$cost)*99)+1]
p_roc <- ggplot(roc, aes(fpr,tpr)) +
geom_line(color=rgb(0,0,1,alpha=0.6)) +
geom_point(color=col_by_cost, size=1, alpha=1) +
coord_fixed() +
geom_line(aes(threshold,threshold), color=rgb(0,0,1,alpha=0.5)) +
xlab("FPR") +
ylab("SPR") +
theme(axis.text.x=element_text(size=rel(0.8), angle=90))+
theme(axis.text.y=element_text(size=rel(0.8)))+
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))+
geom_hline(yintercept=roc[idx_threshold,"tpr"], alpha=0.5, linetype="dashed") +
geom_vline(xintercept=roc[idx_threshold,"fpr"], alpha=0.5, linetype="dashed")+
theme(plot.title = element_text(size=12, hjust = 0.5))
p_roc
}
#Udregning af ROC værdi for baselinemodel
calculate_roc <- function(df, cost_of_fp, cost_of_fn, n=1000) {
tpr <- function(df, threshold) {
sum(test_data$cwstart_pred_baseline >= threshold & test_data$cwstart == 1) / sum(test_data$cwstart == 1)
}
fpr <- function(df, threshold) {
sum(test_data$cwstart_pred_baseline >= threshold & test_data$cwstart == 0) / sum(test_data$cwstart == 0)
}
cost <- function(df, threshold, cost_of_fp, cost_of_fn) {
sum(test_data$cwstart_pred_baseline >= threshold & test_data$cwstart == 0) * cost_of_fp +
sum(test_data$cwstart_pred_baseline < threshold & test_data$cwstart == 1) * cost_of_fn
}
roc <- data.frame(threshold = seq(0,1,length.out=n), tpr=NA, fpr=NA)
roc$tpr <- sapply(roc$threshold, function(th) tpr(df, th))
roc$fpr <- sapply(roc$threshold, function(th) fpr(df, th))
roc$cost <- sapply(roc$threshold, function(th) cost(df, th, 1, 10))
return(roc)
}
#Udregning og plot
roc <- calculate_roc(test_data, 1, 10, n = 1000)
roc_baseline_cvm <- plot_roc(roc, 0.056, 1,10)
roc_baseline_cvm
View(roc)
#Udregning af ROC værdi for random forest model
calculate_roc <- function(df, cost_of_fp, cost_of_fn, n=1000) {
tpr <- function(df, threshold) {
sum(test_data$cwstart_pred_rf >= threshold & test_data$cwstart == 1) / sum(test_data$cwstart == 1)
}
fpr <- function(df, threshold) {
sum(test_data$cwstart_pred_rf >= threshold & test_data$cwstart == 0) / sum(test_data$cwstart == 0)
}
cost <- function(df, threshold, cost_of_fp, cost_of_fn) {
sum(test_data$cwstart_pred_rf >= threshold & test_data$cwstart == 0) * 1 +
sum(test_data$cwstart_pred_rf < threshold & test_data$cwstart == 1) * 10
}
roc <- data.frame(threshold = seq(0,1,length.out=n), tpr=NA, fpr=NA)
roc$tpr <- sapply(roc$threshold, function(th) tpr(df, th))
roc$fpr <- sapply(roc$threshold, function(th) fpr(df, th))
roc$cost <- sapply(roc$threshold, function(th) cost(df, th, 1, 10))
return(roc)
}
#Udregning og plot
roc <- calculate_roc(test_data, 1, 10, n = 10260)
roc_rf_cwstart <- plot_roc(roc, 0.048, 1,10)
roc_rf_cwstart
plot_roc <- function(roc, threshold, cost_of_fp, cost_of_fn) {
norm_vec <- function(v) (v - min(v))/diff(range(v))
idx_threshold = which.min(abs(roc$threshold-threshold))
col_ramp <- colorRampPalette(c("green","orange","red","black"))(100)
col_by_cost <- col_ramp[ceiling(norm_vec(roc$cost)*99)+1]
p_roc <- ggplot(roc, aes(fpr,tpr)) +
geom_line(color=rgb(0,0,1,alpha=0.6)) +
geom_point(color=col_by_cost, size=1, alpha=1) +
coord_fixed() +
geom_line(aes(threshold,threshold), color=rgb(0,0,1,alpha=0.5)) +
xlab("FPR") +
ylab("SPR") +
theme(axis.text.x=element_text(size=rel(0.8), angle=90))+
theme(axis.text.y=element_text(size=rel(0.8)))+
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))+
geom_hline(yintercept=roc[idx_threshold,"tpr"], alpha=0.5, linetype="dashed") +
geom_vline(xintercept=roc[idx_threshold,"fpr"], alpha=0.5, linetype="dashed")+
theme(plot.title = element_text(size=12, hjust = 0.5))
p_roc
}
calculate_roc <- function(df, cost_of_fp, cost_of_fn, n=1000) {
tpr <- function(df, threshold) {
sum(test_data$cwstart_pred_rf >= threshold & test_data$cwstart == 1) / sum(test_data$cwstart == 1)
}
fpr <- function(df, threshold) {
sum(test_data$cwstart_pred_rf >= threshold & test_data$cwstart == 0) / sum(test_data$cwstart == 0)
}
cost <- function(df, threshold, cost_of_fp, cost_of_fn) {
sum(test_data$cwstart_pred_rf >= threshold & test_data$cwstart == 0) * 1 +
sum(test_data$cwstart_pred_rf < threshold & test_data$cwstart == 1) * 10
}
roc <- data.frame(threshold = seq(0,1,length.out=n), tpr=NA, fpr=NA)
roc$tpr <- sapply(roc$threshold, function(th) tpr(df, th))
roc$fpr <- sapply(roc$threshold, function(th) fpr(df, th))
roc$cost <- sapply(roc$threshold, function(th) cost(df, th, 1, 10))
return(roc)
}
#Udregning og plot
roc <- calculate_roc(test_data, 1, 10, n = 10260)
roc <- calculate_roc(test_data, 1, 10, n = 1000)
View(roc)
#Indhentning af data fra PostGresSQL - database. Alternativ load complete_data_deaths.rds
data <-  dbGetQuery(con, "SELECT * from complete_data_cwstart")
# postgressql kan ikke håndtere faktor variable, så disse skal redefineres:
data$Oil <-  as.factor(data$Oil)
data$elct_comp <-  as.factor(data$elct_comp)
data$elct_regulation <-  as.factor(data$elct_regulation)
data$elct_open <-  as.factor(data$elct_open)
data$exe_constraint <-  as.factor(data$exe_constraint)
data$colstyle <-  as.factor(data$colstyle)
data$DIAP <-  as.factor(data$DIAP)
data$PDIAP <-  as.factor(data$PDIAP)
data$SDIAP <-  as.factor(data$SDIAP)
#Oprettelse af træningsdatasæt og testdatasæt - Bloksplit
train_data <-  data %>%
filter(year <= 2011)
test_data <- data %>%
filter(year >=2012)
# Fjernelse af unødvendig data og data, der ikke skal indgå i analysen grundet dets "fremtidskarakter"
train_data <- train_data %>%
select(-cwy,-deathyear)
test_data <- test_data %>%
select(-cwy,-deathyear)
model_baseline_cwstart <- glm(cwstart ~  . -country - year -month,family=binomial(link='logit'),data=train_data)
test_data$cwstart_pred_baseline = predict(model_baseline_cwstart, newdata = test_data, type = "response")
sub <-  test_data %>%
select(cwstart, cwstart_pred_baseline, country, year, month )
View(sub)
sub <-  test_data %>%
select(cwstart, cwstart_pred_baseline, country, year, month ) %>%
filter(cwstart_pred_baseline<0)
test_data$cwstart_pred_egbt = predict(model_egbt_cwstart, newdata = test_data)
#
load("0_lm_deaths.rda")
load("2_rf_deaths.rda")
load("3_egbt_deaths.rda")
#Indhentning af data fra PostGresSQL - database. Alternativ load complete_data_deaths.rds
data <-  dbGetQuery(con, "SELECT * from complete_data_death")
# postgressql kan ikke håndtere faktor variable, så disse skal redefineres:
data$Oil <-  as.factor(data$Oil)
data$elct_comp <-  as.factor(data$elct_comp)
data$elct_regulation <-  as.factor(data$elct_regulation)
data$elct_open <-  as.factor(data$elct_open)
data$exe_constraint <-  as.factor(data$exe_constraint)
data$colstyle <-  as.factor( data$colstyle)
#Oprettelse af træningsdatasæt og testdatasæt - Bloksplit
train_data <-  data %>%
filter(year <= 2011)
test_data <- data %>%
filter(year >=2012)
# Fjernelse af unødvendig data og data, der ikke skal indgå i analysen grundet dets "fremtidskarakter"
train_data <- train_data %>%
select(-cwy,-deathyear)
test_data <- test_data %>%
select(-cwy,-deathyear)
setwd(Models)
load("0_lm_deaths.rda")
load("2_rf_deaths.rda")
load("3_egbt_deaths.rda")
#Indhentning af data fra PostGresSQL - database. Alternativ load complete_data_deaths.rds
data <-  dbGetQuery(con, "SELECT * from complete_data_death")
# postgressql kan ikke håndtere faktor variable, så disse skal redefineres:
data$Oil <-  as.factor(data$Oil)
data$elct_comp <-  as.factor(data$elct_comp)
data$elct_regulation <-  as.factor(data$elct_regulation)
data$elct_open <-  as.factor(data$elct_open)
data$exe_constraint <-  as.factor(data$exe_constraint)
data$colstyle <-  as.factor( data$colstyle)
#Oprettelse af træningsdatasæt og testdatasæt - Bloksplit
train_data <-  data %>%
filter(year <= 2011)
test_data <- data %>%
filter(year >=2012)
# Fjernelse af unødvendig data og data, der ikke skal indgå i analysen grundet dets "fremtidskarakter"
train_data <- train_data %>%
select(-cwy,-deathyear)
test_data <- test_data %>%
select(-cwy,-deathyear)
test_data$deaths_pred_baseline = predict(model_baseline_deaths, newdata = test_data)
library("randomForest")
test_data$deaths_pred_rf = predict(model_rf_deaths, newdata = test_data)
test_data$deaths_pred_egbt = predict(model_egbt_deaths, newdata = test_data)
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= deaths_pred_egbt))
kerneldensity
?geom_density
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= deaths_pred_egbt), bw= 0.8)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= deaths_pred_egbt), bw= 8)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= deaths_pred_egbt), bw= 8, color = "red")
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= deaths_pred_basline), bw= 8, color = "red")+
geom_density(aes(x= deaths_pred_rf), bw= 8, color = "blue")+
geom_density(aes(x= deaths_pred_egb), bw= 8, color = "green")
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= deaths_pred_baseline), bw= 8, color = "red")+
geom_density(aes(x= deaths_pred_rf), bw= 8, color = "blue")+
geom_density(aes(x= deaths_pred_egb), bw= 8, color = "green")
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= deaths_pred_baseline), bw= 8, color = "red")+
geom_density(aes(x= deaths_pred_rf), bw= 8, color = "blue")+
geom_density(aes(x= deaths_pred_egbt), bw= 8, color = "green")
kerneldensity
test_data$pred_res_rd_rf = test_data$deaths - test_data$deaths_pred_rf
test_data$pred_res_baseline = test_data$deaths - test_data$deaths_pred_baseline
test_data$pred_res_egbt = test_data$deaths - test_data$deaths_pred_egbt
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = "red")+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = "blue")+
geom_density(aes(x= pred_res_egbt), bw= 8, color = "green")
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = "red")+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = "blue")+
geom_density(aes(x= pred_res_egbt), bw= 8, color = "green")+
xlim(-1000,1000)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = "red")+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = "blue")+
geom_density(aes(x= pred_res_egbt), bw= 8, color = "green")+
xlim(-500,500)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = "red", width = 2)+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = "blue")+
geom_density(aes(x= pred_res_egbt), bw= 8, color = "green")+
xlim(-500,500)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = "red", size = 2)+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = "blue")+
geom_density(aes(x= pred_res_egbt), bw= 8, color = "green")+
xlim(-500,500)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = "red", size = 1.2)+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = "blue",size = 1.2)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = "green",size = 1.2)+
xlim(-500,500)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = "red", size = 1.2, fill= "blue" )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = "blue",size = 1.2)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = "green",size = 1.2)+
xlim(-500,500)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = "red", size = 1.2, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = "blue",size = 1.2)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = "green",size = 1.2)+
xlim(-500,500)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = "red", size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = "blue",size = 1.2)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = "green",size = 1.2)+
xlim(-500,500)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = "red", size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = "blue",size = 1.2, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = "green",size = .ill= "green", alpha = 0.5)+
xlim(-500,500)
kerneldensity
erneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = "red", size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = "blue",size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = "green",size = 0.3, fill = "green", alpha = 0.5)+
xlim(-500,500)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = "red", size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = "blue", size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = "green", size = 0.3, fill = "green", alpha = 0.5)+
xlim(-500,500)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = "red", size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = "blue", size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = "green", size = 0.3, fill = "green", alpha = 0.5)+
xlim(-250,250)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = "blue", size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = "green", size = 0.3, fill = "green", alpha = 0.5)+
xlim(-250,250)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = alpha("red", 0.1), size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = "blue", size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = "green", size = 0.3, fill = "green", alpha = 0.5)+
xlim(-250,250)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = alpha("red", 0.1), size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = alpha("blue",0.2), size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = alpha("green", 0.2), size = 0.3, fill = "green", alpha = 0.5)+
xlim(-250,250)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = alpha("red", 0.2), size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = alpha("blue",0.2), size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = alpha("green", 0.2), size = 0.3, fill = "green", alpha = 0.5)+
xlim(-250,250)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = alpha("red", 0.2), size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = alpha("blue",0.2), size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = alpha("green", 0.2), size = 0.3, fill = "green", alpha = 0.5)+
labs( y = "Kamprelaterede døde - i tusinder", x="Fejl prædiktion") +
theme_classic() +
theme(legend.position="right",panel.background = element_blank())+
theme(plot.title = element_text(hjust = 0.5), panel.grid.major.y = element_line(color = "grey80"))+
xlim(-250,250)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = alpha("red", 0.2), size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = alpha("blue",0.2), size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = alpha("green", 0.2), size = 0.3, fill = "green", alpha = 0.5)+
labs( y = "Densitet", x="Fejl i prædiktion") +
theme_classic() +
theme(legend.position="right",panel.background = element_blank())+
theme(plot.title = element_text(hjust = 0.5), panel.grid.major.y = element_line(color = "grey80"))+
xlim(-250,250) +
scale_color_manual(name ="",
values=c("green"="green","blue"="blue", "red" = "red"),
labels = c("green" = "Baseline", "blue"="Random Forest", "red" = "EGBtree"))
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = alpha("red", 0.2), size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = alpha("blue",0.2), size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = alpha("green", 0.2), size = 0.3, fill = "green", alpha = 0.5)+
labs( y = "Densitet", x="Fejl i prædiktion") +
theme_classic() +
theme(legend.position="right",panel.background = element_blank())+
theme(plot.title = element_text(hjust = 0.5), panel.grid.major.y = element_line(color = "grey80"))+
xlim(-250,250) +
scale_color_manual(name ="",
values=c("green"="green","blue"="blue", "red" = "red"),
labels = c("green" = "Baseline", "blue"="Random Forest", "red" = "EGBtree")) +
theme(legend.position = "bottom",
legend.title=element_blank(),
legend.text = element_text(size = 7),
legend.background = element_rect(fill=NA)) +
guides(color = guide_legend(override.aes = list(size=2, alpha = 1)))
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = alpha("red", 0.2), size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = alpha("blue",0.2), size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = alpha("green", 0.2), size = 0.3, fill = "green", alpha = 0.5)+
labs( y = "Densitet", x="Fejl i prædiktion") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5), panel.grid.major.y = element_line(color = "grey80"))+
xlim(-250,250) +
scale_color_manual(name ="",
values=c("green"="green","blue"="blue", "red" = "red"),
labels = c("green" = "Baseline", "blue"="Random Forest", "red" = "EGBtree")) +
theme(legend.position = "bottom",
legend.title=element_blank(),
legend.text = element_text(size = 7),
legend.background = element_rect(fill=NA)) +
guides(color = guide_legend(override.aes = list(size=2, alpha = 1)))
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = alpha("red", 0.2), size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = alpha("blue",0.2), size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = alpha("green", 0.2), size = 0.3, fill = "green", alpha = 0.5)+
labs( y = "Densitet", x="Fejl i prædiktion") +
theme(plot.title = element_text(hjust = 0.5), panel.grid.major.y = element_line(color = "grey80"))+
xlim(-250,250) +
scale_color_manual(name ="",
values=c("green"="green","blue"="blue", "red" = "red"),
labels = c("green" = "Baseline", "blue"="Random Forest", "red" = "EGBtree")) +
theme(legend.position = "bottom",
legend.title=element_blank(),
legend.text = element_text(size = 7),
legend.background = element_rect(fill=NA)) +
guides(color = guide_legend(override.aes = list(size=2, alpha = 1)))
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = alpha("red", 0.2), size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = alpha("blue",0.2), size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = alpha("green", 0.2), size = 0.3, fill = "green", alpha = 0.5)+
labs( y = "Densitet", x="Fejl i prædiktion") +
theme_classic() +
xlim(-250,250) +
scale_color_manual(name ="",
values=c("red"="red","blue"="blue", "green" = "green"),
labels = c("red" = "Baseline", "green"="Random Forest", "blue" = "EGBtree")) +
theme(legend.position = "bottom",
legend.title=element_blank(),
legend.text = element_text(size = 7),
legend.background = element_rect(fill=NA)) +
guides(color = guide_legend(override.aes = list(size=2, alpha = 1)))
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = alpha("red", 0.2), size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = alpha("blue",0.2), size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = alpha("green", 0.2), size = 0.3, fill = "green", alpha = 0.5)+
labs( y = "Densitet", x="Fejl i prædiktion") +
theme_classic() +
xlim(-250,250) +
scale_color_manual(
values=c("red"="red","blue"="blue", "green" = "green"),
labels = c("red" = "Baseline", "green"="Random Forest", "blue" = "EGBtree")) +
theme(legend.position = "bottom",
legend.title=element_blank(),
legend.text = element_text(size = 7),
legend.background = element_rect(fill=NA)) +
guides(color = guide_legend(override.aes = list(size=2, alpha = 1)))
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = alpha("red", 0.2), size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = alpha("blue",0.2), size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = alpha("green", 0.2), size = 0.3, fill = "green", alpha = 0.5)+
labs( y = "Densitet", x="Fejl i prædiktion") +
theme_classic() +
xlim(-250,250) +
scale_color_manual(
values=c("red"="red","blue"="blue", "green" = "green"),
labels = c("red" = "Baseline", "green"="Random Forest", "blue" = "EGBtree")) +
theme(legend.position = "bottom",
legend.title=element_blank(),
legend.text = element_text(size = 7),
legend.background = element_rect(fill=NA)) +
guides(color = guide_legend(override.aes = list(size=2, alpha = 1))) +
labs(colour = model)
kerneldensity
kerneldensity <-  ggplot(test_data) +
geom_density(aes(x= pred_res_baseline), bw= 8, color = alpha("red", 0.2), size = 0.3, fill= "red", alpha = 0.5 )+
geom_density(aes(x= pred_res_rd_rf), bw= 8, color = alpha("blue",0.2), size = 0.3, fill= "blue", alpha = 0.5)+
geom_density(aes(x= pred_res_egbt), bw= 8, color = alpha("green", 0.2), size = 0.3, fill = "green", alpha = 0.5)+
labs( y = "Densitet", x="Fejl i prædiktion") +
theme_classic() +
xlim(-250,250) +
scale_color_manual(
values=c("red"="red","blue"="blue", "green" = "green"),
labels = c("red" = "Baseline", "green"="Random Forest", "blue" = "EGBtree")) +
theme(legend.position = "right",
legend.title=element_blank(),
legend.text = element_text(size = 7),
legend.background = element_rect(fill=NA)) +
guides(color = guide_legend(override.aes = list(size=2, alpha = 1))) +
labs(colour = model)
kerneldensity
