cat("\014")
######################################################################
###                                                                ###
###                         MASTER SCRIPTS                         ###
###                                                                ###
######################################################################
#Definere en række workspaces - kræver tilpasning til egen computer
DataCave = "C:/Users/Frederik/Documents/SpecialeData/"
Private = "C:/Users/Frederik/Documents/SpecialeScripts/"
GitHub = "C:/Users/Frederik/Documents/GitHub/Ethnic-Conflict-Prediction"
Models = "C:/Users/Frederik/Documents/GitHub/Ethnic-Conflict-Prediction/Prediction models/models/"
Datafinal = "C:/Users/Frederik/Documents/GitHub/Ethnic-Conflict-Prediction/Data/"
Latexfigure ="C:/Users/Frederik/OneDrive - Københavns Universitet/Speciale paper/03_figures"
Latextable= "C:/Users/Frederik/OneDrive - Københavns Universitet/Speciale paper/04_tables"
# De følgende scripts kører projektet fra ende til anden
setwd(GitHub)
source("2 Packages.R") #Indhenter relevanter pakker for projektet
source("3 Functions.R") # Definere en række funktioner, der anvendes primært i Dataload.R
source("4 PostGres_connect.R") # Forbinder til PostgresSQl - kræver tilretning (!!!)
Tuning af EGBtree model
#Load af oprindelige model
setwd(Models)
load("3_egbt_cwstart.rda")
plot(model_egbt_cwstart) # plot af modellens indledene forsøg med "tilfældig tuning
oprindeligeparametre <- model_egbt_cwstart$modelInfo$parameters #oprindelige parametre for model
#load af data
setwd(Datafinal)
load("Data_cwstart.Rda")
#Oprettelse af træningsdatasæt og testdatasæt - Bloksplit
train_data <-  data %>%
filter(year <= 2011)
test_data <- data %>%
filter(year >=2012)
# Fjernelse af unødvendig data og data, der ikke skal indgå i analysen grundet dets "fremtidskarakter"
train_data <- train_data %>%
select(-cwy,-deathyear)
test_data <- test_data %>%
select(-cwy,-deathyear)
grid <-  expand.grid(max_depth= 1,
nrounds= 441,
eta= 0.25,
gamma = 0,
colsample_bytree= 0.8,
min_child_weight= 1,
subsample= 0.9)
model <- train(cwstart ~  . -country - year -month,
data = train_data,
method = "xgbTree",
trControl = fitControl,
tuneGrid = grid,
objective = "binary:logistic")
test_data$predict2 = predict(model, newdata = test_data, type= "prob")[,2]
#Udregning af ROC værdi for tunet EGBtree
calculate_roc <- function(df, cost_of_fp, cost_of_fn) {
tpr <- function(df, threshold) {
sum(test_data$predict2 >= threshold & test_data$cwstart == 1) / sum(test_data$cwstart == 1)
}
fpr <- function(df, threshold) {
sum(test_data$predict2 >= threshold & test_data$cwstart == 0) / sum(test_data$cwstart == 0)
}
cost <- function(df, threshold, cost_of_fp, cost_of_fn) {
sum(test_data$predict2 >= threshold & test_data$cwstart == 0) * 1 +
sum(test_data$predict2 < threshold & test_data$cwstart == 1) * 10
}
roc <- data.frame(threshold = breaks, tpr=NA, fpr=NA)
roc$tpr <- sapply(roc$threshold, function(th) tpr(df, th))
roc$fpr <- sapply(roc$threshold, function(th) fpr(df, th))
roc$cost <- sapply(roc$threshold, function(th) cost(df, th, 1, 10))
return(roc)}
roc <-  calculate_roc(test_data,1,10)
grid <-  expand.grid(max_depth= 1,
nrounds= 441,
eta= 0.25,
gamma = 0,
colsample_bytree= 0.8,
min_child_weight= 1,
subsample= 0.9)
model <- train(cwstart ~  . -country - year -month,
data = train_data,
method = "xgbTree",
trControl = fitControl,
tuneGrid = grid,
objective = "binary:logistic")
library("caret")
grid <-  expand.grid(max_depth= 1,
nrounds= 441,
eta= 0.25,
gamma = 0,
colsample_bytree= 0.8,
min_child_weight= 1,
subsample= 0.9)
model <- train(cwstart ~  . -country - year -month,
data = train_data,
method = "xgbTree",
trControl = fitControl,
tuneGrid = grid,
objective = "binary:logistic")
test_data$predict = predict(model, newdata = test_data, type= "prob")[,2]
fitControl <- trainControl(method = "cv", number = 5)
grid <-  expand.grid(max_depth= 1,
nrounds= 441,
eta= 0.25,
gamma = 0,
colsample_bytree= 0.8,
min_child_weight= 1,
subsample= 0.9)
model <- train(cwstart ~  . -country - year -month,
data = train_data,
method = "xgbTree",
trControl = fitControl,
tuneGrid = grid,
objective = "binary:logistic")
test_data$predict = predict(model, newdata = test_data, type= "prob")[,2]
#Udregning af ROC værdi for tunet EGBtree
breaks <- c(seq(0, 0.00001, by = 0.000000001),
seq(0.00001,0.0001, by = 0.0000001),
seq(0.0001, 0.001, by = 0.000001),
seq (0.001, 0.01, by = 0.00001),
seq(0.01,0.1, by = 0.0001),
seq(0.1,1, by = 0.001))
calculate_roc <- function(df, cost_of_fp, cost_of_fn) {
tpr <- function(df, threshold) {
sum(test_data$predict2 >= threshold & test_data$cwstart == 1) / sum(test_data$cwstart == 1)
}
fpr <- function(df, threshold) {
sum(test_data$predict2 >= threshold & test_data$cwstart == 0) / sum(test_data$cwstart == 0)
}
cost <- function(df, threshold, cost_of_fp, cost_of_fn) {
sum(test_data$predict2 >= threshold & test_data$cwstart == 0) * 1 +
sum(test_data$predict2 < threshold & test_data$cwstart == 1) * 10
}
roc <- data.frame(threshold = breaks, tpr=NA, fpr=NA)
roc$tpr <- sapply(roc$threshold, function(th) tpr(df, th))
roc$fpr <- sapply(roc$threshold, function(th) fpr(df, th))
roc$cost <- sapply(roc$threshold, function(th) cost(df, th, 1, 10))
return(roc)}
roc <-  calculate_roc(test_data,1,10)
filter <-  roc %>%
filter(tpr >=0.375 & cost < 400)
View(roc)
calculate_roc <- function(df, cost_of_fp, cost_of_fn) {
tpr <- function(df, threshold) {
sum(test_data$predict >= threshold & test_data$cwstart == 1) / sum(test_data$cwstart == 1)
}
fpr <- function(df, threshold) {
sum(test_data$predict >= threshold & test_data$cwstart == 0) / sum(test_data$cwstart == 0)
}
cost <- function(df, threshold, cost_of_fp, cost_of_fn) {
sum(test_data$predict2 >= threshold & test_data$cwstart == 0) * 1 +
sum(test_data$predict < threshold & test_data$cwstart == 1) * 10
}
roc <- data.frame(threshold = breaks, tpr=NA, fpr=NA)
roc$tpr <- sapply(roc$threshold, function(th) tpr(df, th))
roc$fpr <- sapply(roc$threshold, function(th) fpr(df, th))
roc$cost <- sapply(roc$threshold, function(th) cost(df, th, 1, 10))
return(roc)}
roc <-  calculate_roc(test_data,1,10)
filter <-  roc %>%
filter(tpr >=0.375 & cost < 400)
filter <-  roc %>%
filter(tpr >=0.5 & cost < 400)
View(filter)
calculate_roc <- function(df, cost_of_fp, cost_of_fn) {
tpr <- function(df, threshold) {
sum(test_data$predict >= threshold & test_data$cwstart == 1) / sum(test_data$cwstart == 1)
}
fpr <- function(df, threshold) {
sum(test_data$predict >= threshold & test_data$cwstart == 0) / sum(test_data$cwstart == 0)
}
cost <- function(df, threshold, cost_of_fp, cost_of_fn) {
sum(test_data$predict >= threshold & test_data$cwstart == 0) * 1 +
sum(test_data$predict < threshold & test_data$cwstart == 1) * 10
}
roc <- data.frame(threshold = breaks, tpr=NA, fpr=NA)
roc$tpr <- sapply(roc$threshold, function(th) tpr(df, th))
roc$fpr <- sapply(roc$threshold, function(th) fpr(df, th))
roc$cost <- sapply(roc$threshold, function(th) cost(df, th, 1, 10))
return(roc)}
roc <-  calculate_roc(test_data,1,10)
filter <-  roc %>%
filter(tpr >= 0.5 & cost < 400)
View(filter)
View(filter)
#- FP, TP, FN, TN
plot_pred_type_distribution <- function(df, threshold) {
v <- rep(NA, nrow(df))
v <- ifelse(df$predict2 >= threshold & df$cwstart == 1, "TP", v)
v <- ifelse(df$predict2 >= threshold & df$cwstart == 0, "FP", v)
v <- ifelse(df$predict2 < threshold & df$cwstart == 1, "FN", v)
v <- ifelse(df$predict2 < threshold & df$cwstart == 0, "TN", v)
}
# Tilførelse af FP,FN,SP,SN til datasæt
test_data$pred_type <- plot_pred_type_distribution(test_data, 0.00291)
#- FP, TP, FN, TN
plot_pred_type_distribution <- function(df, threshold) {
v <- rep(NA, nrow(df))
v <- ifelse(df$predict >= threshold & df$cwstart == 1, "TP", v)
v <- ifelse(df$predict >= threshold & df$cwstart == 0, "FP", v)
v <- ifelse(df$predict < threshold & df$cwstart == 1, "FN", v)
v <- ifelse(df$predict < threshold & df$cwstart == 0, "TN", v)
}
# Tilførelse af FP,FN,SP,SN til datasæt
test_data$pred_type <- plot_pred_type_distribution(test_data, 0.00291)
opgoer <-  test_data %>%
group_by(pred_type) %>%
summarise(c = n())
View(opgoer)
